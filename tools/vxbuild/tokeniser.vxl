import patterns;

import "sources.vxl" as sources;

class Token {
    HUMAN_READABLE_NAME = "token";

    constructor(source) {
        this.value = source;

        this.sourceContainer = null;
        this.location = null;
    }

    matches(token, targetValue) {
        if (!(token inherits this)) {
            return false;
        }

        if (targetValue != null && token.value != targetValue) {
            return false;
        }

        return true;
    }
}

class KeywordToken extends Token {HUMAN_READABLE_NAME = "keyword";}
class AtomToken extends Token {HUMAN_READABLE_NAME = "atom";}
class TypeNameToken extends Token {HUMAN_READABLE_NAME = "type name";}
class StaticMacroToken extends Token {HUMAN_READABLE_NAME = "static function name";}
class BracketToken extends Token {HUMAN_READABLE_NAME = "bracket";}
class DelimeterToken extends Token {HUMAN_READABLE_NAME = "delimeter (,)";}
class StatementDelimeterToken extends Token {HUMAN_READABLE_NAME = "statement delimeter (;)";}
class PropertyAccessorToken extends Token {HUMAN_READABLE_NAME = "property accessor (.)";}
class PropertyDefinerToken extends Token {HUMAN_READABLE_NAME = "property definer (:)";}
class OperatorToken extends Token {HUMAN_READABLE_NAME = "operator";}
class AssignmentOperatorToken extends OperatorToken {HUMAN_READABLE_NAME = "assignment operator";}
class IncrementationOperatorToken extends OperatorToken {HUMAN_READABLE_NAME = "incrementation operator";}
class IdentifierToken extends Token {HUMAN_READABLE_NAME = "identifier";}

class StringToken extends Token {
    HUMAN_READABLE_NAME = "string literal";

    constructor(value) {
        super(null);

        this.value = value;
    }
}

class NumberToken extends Token {
    HUMAN_READABLE_NAME = "number literal";

    constructor(value) {
        super(null);

        this.value = value;
    }
}

var KEYWORDS = [
    "syscall",
    "import",
    "as",
    "return",
    "function",
    "class",
    "extends",
    "get",
    "set",
    "this",
    "super",
    "new",
    "var",
    "if",
    "else",
    "while",
    "for",
    "retain",
    "throw",
    "try",
    "catch",
    "enum",
    "break",
    "continue",
    "delete"
];

var ATOMS = [
    "null",
    "true",
    "false",
    "infinity",
    "nan"
];

var TYPE_NAMES = [
    "Boolean",
    "Byte",
    "Function",
    "ClosureFunction",
    "Number",
    "Buffer",
    "String",
    "Object",
    "List",
    "WeakReference"
];

var NAMED_OPERATORS = ["is", "inherits"];

var STRING_CONTENTS_PATTERN = [
    patterns.repeat(1, infinity, [patterns.anyCharExcept("\"'`\\")])
];

var STRING_OPENERS = [Byte("\""), Byte("'"), Byte("`")];

var UP_TO_BLOCK_COMMENT_CLOSE_PATTERN = [
    patterns.any([
        patterns.repeat(1, infinity, [
            patterns.anyCharExcept("*/")
        ]),
        patterns.anyChar("*/")
    ])
];

var UP_TO_LINE_COMMENT_END_PATTERN = [
    patterns.repeat(0, infinity, [
        patterns.anyCharExcept("\n")
    ]),
    patterns.any([
        patterns.string("\n"),
        patterns.END
    ])
];

var BRACKETS = [Byte("("), Byte("{"), Byte("["), Byte(")"), Byte("}"), Byte("]")];

var STATIC_MACROS = [
    patterns.string("#"),
    patterns.anyString([
        "symbol",
        "usedprop",
        "prop",
        "used"
    ]),
    patterns.lookahead(patterns.ALPHANUMERIC, false)
];

var INCREMENTATION_OPERATORS = [patterns.anyString(["++", "--"])];

var ASSIGNMENT_OPERATOR_PATTERN = [
    patterns.anyString([
        "*=", "/=", "%=", "+=", "-=",
        "<<=", ">>>=", ">>=",
        "&&&=", "|||=", "&&=", "||=", "??=",
        "&=", "^=", "|="
    ])
];

var OPERATOR_PATTERN = [
    patterns.any([
        patterns.anyString([
            "<<", ">>>", ">>",
            "<=", ">=", "!==", "!=", "===", "==",
            "&&&", "|||", "&&", "||", "??"
        ]),
        patterns.anyChar("+-*/%<>!~&^|?")
    ])
];

var NUMBER_PATTERN = [
    patterns.any([
        patterns.pattern([
            patterns.repeat(1, infinity, [patterns.DIGIT]),
            patterns.maybe([
                patterns.string("."),
                patterns.repeat(0, infinity, [patterns.DIGIT])
            ])
        ]),
        patterns.pattern([
            patterns.repeat(0, infinity, [patterns.DIGIT]),
            patterns.string("."),
            patterns.maybe([
                patterns.repeat(1, infinity, [patterns.DIGIT])
            ])
        ])
    ]),
    patterns.maybe([
        patterns.anyChar("eE"),
        patterns.maybe([patterns.anyChar("+-")]),
        patterns.repeat(1, infinity, [patterns.DIGIT])
    ])
];

export function tokenise(sourceContainer) {
    var tokens = [];
    var stringLiteralOpener = null;
    var currentString = null;
    var blockCommentDepth = 0;
    var source = sourceContainer.source;
    var sourceBuffer = source.toBuffer();
    var sourceSize = source.size;

    var mutables = {
        matchedString: null,
        previousPosition: 0,
        currentPosition: 0
    };

    function matchToken(pattern) {
        var position = mutables[#prop(currentPosition)];

        if (pattern is String) {
            var patternSize = syscall Sz(pattern);
            var matchCandidate = syscall Sr(source, position, position + patternSize);

            if (matchCandidate == pattern) {
                mutables[#prop(matchedString)] = matchCandidate;
                mutables[#prop(previousPosition)] = position;
                mutables[#prop(currentPosition)] += patternSize;

                return true;
            }
            
            return false;
        }

        var match = patterns.match(sourceBuffer, pattern, {matchRest: true, index: position});

        if (match.matches) {
            mutables[#prop(matchedString)] = source.substring(position, match.index);
            mutables[#prop(previousPosition)] = position;
            mutables[#prop(currentPosition)] = match.index;

            return true;
        }

        return false;
    }

    function matchIdentifier() {
        var position = mutables.currentPosition;
        var oldPosition = &position;
        var currentByte = sourceBuffer[position];
        var matches = false;

        while (
            (currentByte >= Byte("a") && currentByte <= Byte("z")) ||
            (currentByte >= Byte("A") && currentByte <= Byte("Z")) ||
            (matches && currentByte >= Byte("0") && currentByte <= Byte("9")) ||
            currentByte == Byte("_") || currentByte == Byte("$")
        ) {
            matches = true;
            currentByte = sourceBuffer[++position];
        }

        if (!matches) {
            return false;
        }

        mutables[#prop(matchedString)] = source.substring(oldPosition, position);
        mutables[#prop(previousPosition)] = oldPosition;
        mutables[#prop(currentPosition)] = position;

        return true;
    }

    function addToken(tokenClass, value) {
        value ??= mutables.matchedString;

        var token = new tokenClass(value);

        token.sourceContainer = sourceContainer;
        token.location = mutables.previousPosition;

        tokens.push(token);
    }

    while (mutables.currentPosition < sourceSize) {
        var currentByte = sourceBuffer[mutables.currentPosition];

        if (stringLiteralOpener != null) {
            if (matchToken(STRING_CONTENTS_PATTERN)) {
                currentString += mutables.matchedString;
                continue;
            }

            if (currentByte == stringLiteralOpener) {
                addToken(StringToken, currentString);

                stringLiteralOpener = null;
                currentString = null;
                mutables.currentPosition++;

                continue;
            }

            if (matchToken("\\\\")) {
                currentString += "\\";
                continue;
            }

            if (matchToken("\\r")) {
                currentString += "\r";
                continue;
            }

            if (matchToken("\\n")) {
                currentString += "\n";
                continue;
            }

            if (matchToken("\\\"")) {
                currentString += "\"";
                continue;
            }

            if (matchToken("\\'")) {
                currentString += "'";
                continue;
            }

            if (matchToken("\\`")) {
                currentString += "`";
                continue;
            }

            currentString += source[mutables.currentPosition++];

            continue;
        }

        if (matchToken("//")) {
            matchToken(UP_TO_LINE_COMMENT_END_PATTERN);
            continue;
        }

        if (matchToken("/*")) {
            blockCommentDepth++;
            continue;
        }

        if (blockCommentDepth > 0) {
            if (matchToken("*/")) {
                blockCommentDepth--;
                continue;
            }

            matchToken(UP_TO_BLOCK_COMMENT_CLOSE_PATTERN);

            continue;
        }

        if (currentByte == Byte(" ") ||| currentByte == Byte("\n")) {
            mutables.currentPosition++;
            continue;
        }

        if (currentByte == Byte(";")) {
            addToken(StatementDelimeterToken);
            mutables.currentPosition++;
            continue;
        }

        if (currentByte == Byte(".")) {
            if (matchToken("...")) {
                addToken(OperatorToken);
                continue;
            }

            addToken(PropertyAccessorToken);
            mutables.currentPosition++;
            continue;
        }

        if (currentByte == Byte(",")) {
            addToken(DelimeterToken);
            mutables.currentPosition++;
            continue;
        }

        if (currentByte == Byte(":")) {
            addToken(PropertyDefinerToken);
            mutables.currentPosition++;
            continue;
        }

        if (currentByte == Byte("=")) {
            addToken(AssignmentOperatorToken);
            mutables.currentPosition++;
            continue;
        }

        if (BRACKETS.contains(currentByte, true)) {
            addToken(BracketToken);
            mutables.currentPosition++;
            continue;
        }

        if (currentByte == Byte("#") && matchToken(STATIC_MACRO_TOKEN)) {
            addToken(StaticMacroToken);
            continue;
        }

        if (STRING_OPENERS.contains(currentByte, true)) {
            stringLiteralOpener = currentByte;
            mutables.currentPosition++;
            continue;
        }

        if (
            (
                (currentByte >= Byte("a") &&& currentByte <= Byte("z")) |||
                (currentByte >= Byte("A") &&& currentByte <= Byte("Z")) |||
                currentByte == Byte("_") ||| currentByte == Byte("$")
            ) && matchIdentifier()
        ) {
            if (KEYWORDS.contains(mutables.matchedString, true)) {
                addToken(KeywordToken);
                continue;
            }

            if (ATOMS.contains(mutables.matchedString, true)) {
                addToken(AtomToken);
                continue;
            }

            if (TYPE_NAMES.contains(mutables.matchedString, true)) {
                addToken(TypeNameToken);
                continue;
            }

            if (NAMED_OPERATORS.contains(mutables.matchedString, true)) {
                addToken(OperatorToken);
                continue;
            }

            addToken(IdentifierToken);
            continue;
        }

        if (matchToken(INCREMENTATION_OPERATORS)) {
            addToken(IncrementationOperatorToken);
            continue;
        }

        if (matchToken(ASSIGNMENT_OPERATOR_PATTERN)) {
            addToken(OperatorToken);
            continue;
        }

        if (matchToken(OPERATOR_PATTERN)) {
            addToken(OperatorToken);
            continue;
        }

        if (matchToken(NUMBER_PATTERN)) {
            addToken(NumberToken, mutables.matchedString.toNumber());
            continue;
        }

        // TODO: Allow base conversions in Voxel to parse binary, octal and hexadecimal numbers

        throw new sources.SourceError("Invalid syntax", sourceContainer, mutables.currentPosition);
    }

    return tokens;
}