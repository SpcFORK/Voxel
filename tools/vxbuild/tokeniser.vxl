import patterns;

import "sources.vxl" as sources;

class Token {
    HUMAN_READABLE_NAME = "token";

    constructor(source) {
        this.value = source;

        this.sourceContainer = null;
        this.location = null;
    }

    matches(token, targetValue) {
        if (!(token inherits this)) {
            return false;
        }

        if (targetValue != null && token.value != targetValue) {
            return false;
        }

        return true;
    }
}

class KeywordToken extends Token {HUMAN_READABLE_NAME = "keyword";}
class AtomToken extends Token {HUMAN_READABLE_NAME = "atom";}
class TypeNameToken extends Token {HUMAN_READABLE_NAME = "type name";}
class StaticMacroToken extends Token {HUMAN_READABLE_NAME = "static function name";}
class BracketToken extends Token {HUMAN_READABLE_NAME = "bracket";}
class DelimeterToken extends Token {HUMAN_READABLE_NAME = "delimeter (,)";}
class StatementDelimeterToken extends Token {HUMAN_READABLE_NAME = "statement delimeter (;)";}
class PropertyAccessorToken extends Token {HUMAN_READABLE_NAME = "property accessor (.)";}
class PropertyDefinerToken extends Token {HUMAN_READABLE_NAME = "property definer (:)";}
class OperatorToken extends Token {HUMAN_READABLE_NAME = "operator";}
class AssignmentOperatorToken extends OperatorToken {HUMAN_READABLE_NAME = "assignment operator";}
class IncrementationOperatorToken extends OperatorToken {}
class IdentifierToken extends Token {HUMAN_READABLE_NAME = "identifier";}

class StringToken extends Token {
    HUMAN_READABLE_NAME = "string literal";

    constructor(value) {
        super(null);

        this.value = value;
    }
}

class NumberToken extends Token {
    HUMAN_READABLE_NAME = "number literal";

    constructor(value) {
        super(null);

        this.value = value;
    }
}

export function tokenise(sourceContainer) {
    var tokens = [];
    var stringLiteralOpener = null;
    var currentString = null;
    var blockCommentDepth = 0;

    var mutables = {
        match: null,
        source: sourceContainer.source,
        previousPosition: 0,
        currentPosition: 0
    };

    function matchToken(pattern) {
        if (pattern is String) {
            pattern = [patterns.string(pattern)];
        }

        var match = mutables.match = patterns.match(mutables.source, pattern, {matchRest: true});

        if (match.matches) {
            mutables.source = mutables.source.substring(match.index);
            mutables.previousPosition = mutables.currentPosition;
            mutables.currentPosition += match.index;

            return true;
        }

        return false;
    }

    function addToken(tokenClass, value) {
        value ??= mutables.source.substring(0, mutables.match.index);

        var token = new tokenClass(value);

        token.sourceContainer = sourceContainer;
        token.location = mutables.previousPosition;

        tokens.push(token);
    }

    while (mutables.source.size > 0) {
        if (stringLiteralOpener != null) {
            if (matchToken(stringLiteralOpener)) {
                addToken(StringToken, currentString);

                stringLiteralOpener = null;
                currentString = null;

                continue;
            }

            if (matchToken("\\\\")) {
                currentString += "\\";
                continue;
            }

            if (matchToken("\\r")) {
                currentString += "\r";
                continue;
            }

            if (matchToken("\\n")) {
                currentString += "\n";
                continue;
            }

            if (matchToken("\\\"")) {
                currentString += "\"";
                continue;
            }

            if (matchToken("\\'")) {
                currentString += "'";
                continue;
            }

            if (matchToken("\\`")) {
                currentString += "`";
                continue;
            }

            currentString += mutables.source[0];
            mutables.currentPosition++;
            mutables.source = mutables.source.substring(1);

            continue;
        }

        if (matchToken("\*")) {
            blockCommentDepth++;
            continue;
        }

        if (blockCommentDepth > 0) {
            if (matchToken("*/")) {
                blockCommentDepth--;
                continue;
            }

            matchToken([
                any([
                    patterns.repeat(1, infinity, [
                        patterns.anyCharExcept("*/")
                    ]),
                    patterns.anyChar("*/")
                ])
            ]);

            continue;
        }

        if (matchToken([
            patterns.string("//"),
            patterns.repeat(0, infinity, [
                patterns.anyCharExcept("\n")
            ]),
            patterns.any([
                patterns.string("\n"),
                patterns.END
            ])
        ])) {
            continue;
        }

        if (matchToken([patterns.anyChar("\"'`")])) {
            stringLiteralOpener = sourceContainer.source.substring(mutables.previousPosition, mutables.currentPosition);
            continue;
        }

        if (matchToken([
            patterns.anyString([
                "syscall",
                "as",
                "return",
                "function",
                "class",
                "extends",
                "get",
                "set",
                "this",
                "super",
                "new",
                "var",
                "if",
                "else",
                "while",
                "for",
                "retain",
                "throw",
                "try",
                "catch",
                "enum",
                "break",
                "continue",
                "delete"
            ]),
            patterns.lookahead(patterns.ALPHANUMERIC, false)
        ])) {
            addToken(KeywordToken);
            continue;
        }

        if (matchToken([
            patterns.anyString([
                "null",
                "true",
                "false",
                "infinity",
                "nan"
            ]),
            patterns.lookahead(patterns.ALPHANUMERIC, false)
        ])) {
            addToken(AtomToken);
            continue;
        }

        if (matchToken([
            patterns.anyString([
                "Boolean",
                "Byte",
                "Function",
                "ClosureFunction",
                "Number",
                "Buffer",
                "String",
                "Object",
                "List",
                "WeakReference"
            ]),
            patterns.lookahead(patterns.ALPHANUMERIC, false)
        ])) {
            addToken(TypeNameToken);
            continue;
        }

        if (matchToken([
            patterns.anyString([
                "#symbol",
                "#usedprop",
                "#prop",
                "#used"
            ]),
            patterns.lookahead(patterns.ALPHANUMERIC, false)
        ])) {
            addToken(StaticMacroToken);
            continue;
        }

        if (matchToken([patterns.anyChar("({[)}]")])) {
            addToken(BracketToken);
            continue;
        }

        if (matchToken([patterns.string(",")])) {
            addToken(DelimeterToken);
            continue;
        }

        if (matchToken([patterns.string(";")])) {
            addToken(StatementDelimeterToken);
            continue;
        }

        if (matchToken([patterns.string("...")])) {
            addToken(OperatorToken);
            continue;
        }

        if (matchToken([patterns.string(".")])) {
            addToken(PropertyAccessorToken);
            continue;
        }

        if (matchToken([patterns.string(":")])) {
            addToken(PropertyDefinerToken);
            continue;
        }

        if (matchToken([patterns.anyString(["++", "--"])])) {
            addToken(IncrementationOperatorToken);
            continue;
        }

        if (matchToken([
            patterns.anyString([
                "*=", "/=", "%=", "+=", "-=",
                "<<=", ">>>=", ">>=",
                "&&&=", "|||=", "&&=", "||=", "??=",
                "&=", "^=", "|="
            ])
        ])) {
            addToken(OperatorToken);
            continue;
        }

        if (matchToken([
            patterns.any([
                patterns.anyString([
                    "<<", ">>>", ">>",
                    "<=", ">=", "!==", "!=", "===", "==",
                    "&&&", "|||", "&&", "||", "??",
                    "is", "inherits"
                ]),
                patterns.anyChar("+-*/%<>!~&^|?")
            ])
        ])) {
            addToken(OperatorToken);
            continue;
        }

        if (matchToken("=")) {
            addToken(AssignmentOperatorToken);
            continue;
        }

        // TODO: Add all other syntax features

        if (matchToken([patterns.WHITESPACE_STRING])) {
            continue;
        }

        throw new sources.SourceError("Invalid syntax", sourceContainer, mutables.currentPosition);
    }

    return tokens;
}