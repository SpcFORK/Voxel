import io;

import "imported.vxl" as imported;
import "another.vxl" as another;

/*
    This is a demonstration of features included in the Voxel programming
    language. The first feature to demonstrate is nested block comments:

    /* This is a nested block comment. */

    Other features will be introduced with line comments.
*/

// Expression parsing

var complexExpression = -5 + 12 * (-3 + 2) * -(5 - 4);
var thisIsAwesome = true;

// Calling library functions

io.println("This message was from a .vxl file!");
io.println("This time, it was compiled to a .vxc file and loaded by the runtime!");

// Imported modules

io.println("Imported value:", imported.valueFromImport);

imported.functionFromImport();

// `if` statements

if (thisIsAwesome) {
    io.println("This is awesome!");
} else {
    io.println("This is not awesome!");
}

// `while` loops

var count = 10;

while (count > 0) {
    io.println("Countdown:", count);

    count = count - 1;
}

// Functions

function hello() {
    io.println("Hello from another function!");
}

function test(value, otherValue) {
    io.println("This is called from a function with arguments passed:", value, "and", otherValue);

    hello();

    return otherValue + 1;
}

io.println("Here is the result of a complex expression:", complexExpression);

var returned = test("I am a passed-in value!", 2 + 3);

io.println("Returned value:", returned);

// `for` loops

for (var i = 1; i <= 15; i = i + 1) {
    if (i % 3 == 0 && i % 5 == 0) {
        io.println("Fizzbuzz!");
    } else if (i % 3 == 0) {
        io.println("Fizz!");
    } else if (i % 5 == 0) {
        io.println("Buzz!");
    } else {
        io.println(i);
    }
}

// Lists

var someList = [5, 7, 9];

function getSomeList() {
    return someList;
}

function getListString(list) {
    return "[" + list.join(", ") + "]";
}

var list = ["a", "b", "c"];

io.println("Created new list:", getListString(list));

io.print("Pushing item; new length is: ");
io.print(list.push("d"));
io.println("");

io.println(getListString(list));

io.println("Getting item 2:", list[2]);
io.println("Popping item:", list.pop());
io.println("Popping item again:", list.pop());
io.println("Remaining list:", getListString(list));

io.println("Some list:", getListString(getSomeList()));

getSomeList()[1] = 8;

io.println("Some list again:", getListString(getSomeList()));
io.println("List length:", list.length);
io.println("Some list length:", getSomeList().length);

// Objects

var object = {};

io.println("Created new object:", object);

io.println("Getting object length:", object.length);

object["test"] = "hello";
object["number"] = 123;

object.isWorking = true;

io.println("Set some values:", object);

io.println("Getting number using index accessor:", object["number"]);
io.println("Getting number using property accessor:", object.number);
io.println("Getting item not in object:", object["nothing"]);
io.println("Getting object length:", object.length);

object["number"] = 456;

io.println("Setting number using index accessor:", object);

object.number = 789;

io.println("Setting number using property accessor:", object);

delete object["number"];

io.println("Getting object length:", object.length);

io.println("Removing number:", object);

var structured = {
    hello: {
        "this": "is",
        an: "object",
        that: ["contains", "a", "list"]
    },
    "number of items in list": 3,
    value: 4
};

io.println("Object initialiser syntax:", structured);

// Methods

function method() {
    io.println("Object value:", this.value);

    this.value = 5;
}

structured.method = method;

io.println("Calling method within object:");

structured.method();

io.println("New value:", structured.value);