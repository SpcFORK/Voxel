var builtinProps = {};

function instantiate(object, constructorArgs) {
    var instance = {};
    var prototypes = syscall Op(instance);

    syscall Lu(object, prototypes);

    var constructorFunction = instance.constructor;

    if (syscall T(constructorFunction) != "@" &&& syscall T(constructorFunction) != "C") {
        return instance;
    }

    var result = instance.constructor(...constructorArgs);

    if (result != null) {
        return result;
    }

    return instance;
}

function setPrototypes(object, prototypes) {
    var currentPrototypes = syscall Op(object);

    for (var i = 0; i < syscall Ll(prototypes); ++i) {
        syscall Lu(prototypes[i], currentPrototypes);
    }
}

function callSuperMethod(object, property, args) {
    var inheritedPrototypes = syscall Op(object);

    if (syscall T(inheritedPrototypes) != "L") {
        return null;
    }

    for (var i = syscall Ll(inheritedPrototypes) - 1; i >= 0; --i) {
        var methodFunction = inheritedPrototypes[i][property];

        if (syscall T(methodFunction) == "@" ||| syscall T(methodFunction) == "C") {
            syscall Lu(inheritedPrototypes[i], syscall Rg());

            var result = methodFunction(...args);

            syscall Lp(syscall Rg());

            return result;
        }
    }

    return null;
}

function callSuperConstructors(object, constructorArgs) {
    var inheritedPrototypes = syscall Op(object);

    if (syscall T(inheritedPrototypes) != "L") {
        return null;
    }

    var prototypesLength = syscall Ll(inheritedPrototypes);

    for (var i = 0; i < prototypesLength; i++) {
        var constructorFunction = inheritedPrototypes[i][#prop(constructor)];

        if (syscall T(constructorFunction) == "@" ||| syscall T(constructorFunction) == "C") {
            syscall Lu(inheritedPrototypes[i], syscall Rg());

            constructorFunction(...constructorArgs);

            syscall Lp(syscall Rg());
        }
    }
}

function getProperty(thing, property) {
    if (#usedprop(weak) &&& property == #prop(weak)) {
        return function() {
            return syscall W(thing);
        };
    }

    var type = syscall T(thing);

    var propsForType = builtinProps[type];
    var builtinProp = propsForType[property];

    if (type == "O") {
        syscall Ms(thing);

        var getter = syscall Ogg(thing, property);

        if (getter) {
            syscall Mu();

            var value = getter();

            syscall Mp();

            return value;
        }

        if (builtinProp) {
            return builtinProp(thing);
        }

        return syscall Og(thing, property);
    }

    if (builtinProp) {
        return builtinProp(thing);
    }

    return null;
}

function setProperty(thing, property, value) {
    if (syscall T(thing) == "O") {
        var setter = syscall Ogs(thing, property);

        if (setter) {
            syscall Ms(thing);
            syscall Mu();

            setter(value);

            syscall Td(value);

            syscall Mp();

            return value;
        }
    }

    return syscall Ts(value, thing, property);
}