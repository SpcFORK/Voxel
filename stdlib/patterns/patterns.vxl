function _stringToBuffer(value) {
    if (value is String) {
        return value.toBuffer();
    }

    return value;
}

function pattern(selectors) {
    return function(input, index) {
        var captures = {};
        var currentIndex = &index;

        for (var i = 0; i < selectors.length; i++) {
            var result = selectors[i](input, currentIndex);

            if (!result.matches) {
                return {matches: false, index: index};
            }

            currentIndex = result.index;

            (result.captures ?? {}).forEach(function(captureList, name) {
                captures[name] ??= [];

                captureList.forEach(function(value) {
                    captures[name].push(value);
                });
            });
        }

        return {matches: true, index: currentIndex, captures: captures};
    };
}

function string(value) {
    value = _stringToBuffer(value);

    return function(input, index) {
        for (var i = 0; i < value.size; i++) {
            if (value[i] != input[index + i]) {
                return {matches: false, index: index};
            }
        }

        return {matches: true, index: index + value.size};
    };
}

function any(selectors) {
    return function(input, index) {
        for (var i = 0; i < selectors.length; i++) {
            var result = selectors[i](input, index);

            if (result.matches) {
                return result;
            }
        }

        return {matches: false, index: index};
    };
}

function anyChar(chars) {
    return function(input, index) {
        for (var i = 0; i < chars.length; i++) {
            var result = string(chars[i])(input, index);

            if (result.matches) {
                return result;
            }
        }

        return {matches: false, index: index};
    };
}

function anyCharExcept(chars) {
    return function(input, index) {
        for (var i = 0; i < chars.length; i++) {
            var result = string(chars[i])(input, index);

            if (result.matches) {
                return {matches: false, index: index};
            }
        }

        return {matches: true, index: index + 1};
    };
}

function anyString(strings) {
    strings = strings.map(function(string) {
        return _stringToBuffer(string);
    });

    return function(input, index) {
        for (var i = 0; i < strings.length; i++) {
            var value = strings[i];
            var stringMatches = null;

            stringMatches = true;

            for (var j = 0; j < value.size; j++) {
                if (value[j] != input[index + j]) {
                    stringMatches = false;
                    break;
                }
            }

            if (stringMatches == true) { // FIXME: DCE causes this to always be `false`
                return {matches: true, index: index + value.size};
            }
        }

        return {matches: false, index: index};
    };
}

function byteRangeBetween(start, end) {
    return function(input, index) {
        var byte = input[index];

        if (byte >= start &&& byte <= end) {
            return {matches: true, index: index + 1};
        }

        return {matches: false, index: index};
    };
}

function maybe(selectors) {
    return function(input, index) {
        var result = pattern(selectors)(input, index);

        result.matches = true;

        return result;
    };
}

function lookahead(selector, positive) {
    positive ??= true;

    return function(input, index) {
        if (!positive && index + 1 == input.size) {
            return {matches: true, index: index};
        }

        var result = pattern(selector)(input, index);

        if (!positive) {
            result.matches = !result.matches;
        }

        result.index = index;

        return result;
    };
}

function repeat(min, max, selectors) {
    return function(input, index) {
        var result;
        var captures = {};
        var currentIndex = &index;

        for (var i = 1; i <= max; i++) {
            result = pattern(selectors)(input, currentIndex);

            if (!result.matches) {
                if (i > min) {
                    break;
                }

                return {matches: false, index: index};
            }

            currentIndex = result.index;

            (result.captures ?? {}).forEach(function(captureList, name) {
                captures[name] ??= [];

                captureList.forEach(function(value) {
                    captures[name].push(value);
                });
            });
        }

        return {matches: true, index: currentIndex, captures: captures};
    };
}

function capture(name, selectors) {
    return function(input, index) {
        var result = pattern(selectors)(input, &index);

        if (result.matches) {
            result.captures ??= {};
            result.captures[name] ??= [];

            result.captures[name].push(input.section(index, result.index));
        }

        return result;
    };
}

function match(input, selectors, options) {
    var inputWasString = input is String;

    input = _stringToBuffer(input);

    var result = pattern(selectors)(input, options.index ?? 0);
    var indexIsExpected = result.index == input.size ||| options.matchRest;

    if (!(result.matches &&& indexIsExpected)) {
        return null;
    }

    if (inputWasString) {
        if (result.captures) {
            result.captures.forEach(function(captureList, name) {
                result.captures[name] = captureList.map(function(value) {
                    return value.toString();
                });
            });
        }

        result.index = input.section(0, result.index).toString().length;
    }

    return result;
}

function END(input, index) {
    return {matches: index >= input.size, index: index};
}

function ANY_CHAR(input, index) {
    if (index >= input.size) {
        return {matches: false, index: index};
    }

    return {matches: true, index: index + 1};
}

function ALPHA_UPPER(...args) {
    return byteRangeBetween(Byte("A"), Byte("Z"))(...args);
}

function ALPHA_LOWER(...args) {
    return byteRangeBetween(Byte("a"), Byte("z"))(...args);
}

function ALPHA(...args) {
    return any([ALPHA_UPPER, ALPHA_LOWER])(...args);
}

function DIGIT(...args) {
    return byteRangeBetween(Byte("0"), Byte("9"))(...args);
}

function INTEGER(...args) {
    return repeat(1, infinity, [DIGIT])(...args);
}

function ALPHANUMERIC(...args) {
    return any([ALPHA, DIGIT])(...args);
}

function ALPHANUMERIC_STRING(...args) {
    return repeat(1, infinity, [ALPHANUMERIC])(...args);
}

function WHITESPACE(...args) {
    return anyChar(" \n")(...args);
}

function WHITESPACE_STRING(...args) {
    return repeat(1, infinity, [WHITESPACE])(...args);
}