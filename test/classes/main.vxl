class TestClass {
    propSetInChild = 123;

    constructor(a, b) {
        syscall io_out("TestClass constructor called with args: ");
        syscall io_out(a);
        syscall io_out(", ");
        syscall io_out(b);
        syscall io_out("\n");

        this.a = a;
        this.b = b;
    }

    get added() {
        return this.a + this.b;
    }

    set both(value) {
        this.a = value;
        this.b = value;
    }

    multiply() {
        return this.a * this.b;
    }

    accumulate() {
        this.a = this.multiply();
    }
}

class ClassWithoutConstructor {
    someValue = 123;

    getValue() {
        return this.someValue * 2;
    }
}

var instance1 = new TestClass(2, 3);
var instance2 = new TestClass(3, 4);

syscall io_out("instance1 multiply result: ");
syscall io_out(instance1.multiply());
syscall io_out("\n");

syscall io_out("instance1 added result: ");
syscall io_out(instance1.added);
syscall io_out("\n");

instance1.accumulate();

syscall io_out("instance1 multiply after accumulate result: ");
syscall io_out(instance1.multiply());
syscall io_out("\n");

instance1.both = 3;

syscall io_out("instance1 multiply after set both result: ");
syscall io_out(instance1.multiply());
syscall io_out("\n");

syscall io_out("instance2 multiply result: ");
syscall io_out(instance2.multiply());
syscall io_out("\n");

instance2.accumulate();

syscall io_out("instance2 multiply after accumulate result: ");
syscall io_out(instance2.multiply());
syscall io_out("\n");

var instance3 = new ClassWithoutConstructor();

syscall io_out("Class without constructor value: ");
syscall io_out(instance3.getValue());
syscall io_out("\n");

class ChildClass extends TestClass {
    constructor(a, b, c) {
        syscall io_out("ChildClass constructor called with extra arg: ");
        syscall io_out(c);
        syscall io_out("\n");

        super(a, b);

        this.c = c;
    }

    multiply() {
        return super.multiply() * this.c;
    }
}

var instance4 = new ChildClass(4, 5, 6);

instance4.propSetInChild = 456;

syscall io_out("instance1 parent class prop: ");
syscall io_out(instance1.propSetInChild);
syscall io_out("\n");

syscall io_out("instance4 child class prop: ");
syscall io_out(instance4.propSetInChild);
syscall io_out("\n");

syscall io_out("instance4 multiply result: ");
syscall io_out(instance4.multiply());
syscall io_out("\n");

instance4.accumulate();

syscall io_out("instance4 multiply after accumulate result: ");
syscall io_out(instance4.multiply());
syscall io_out("\n");

class Animal {
    constructor(name, legCount) {
        this.name = name;
        this.legCount = legCount;
    }

    describe() {
        syscall io_out("Leg count: ");
        syscall io_out(this.legCount);
        syscall io_out("\n");
    }

    jump() {
        if (this.legCount == 0) {
            syscall io_out("This animal can't jump\n");

            return;
        }

        syscall io_out("This animal jumps up into the air\n");
    }

    swim() {
        syscall io_out("This animal can't swim\n");
    }

    fly() {
        syscall io_out("This animal can't fly\n");
    }
}

class SwimmingAnimalMixin {
    constructor() {
        this.canBreatheUnderwater = true;
    }

    swim() {
        syscall io_out("This animal swims through the water\n");

        if (!this.canBreatheUnderwater) {
            syscall io_out("...then comes out, gasping for a breath of fresh air\n");
        }
    }
}

class FlyingAnimalMixin {
    constructor() {
        this.canFlyLongDistances = true;
    }

    fly() {
        syscall io_out("This animal flies through the sky\n");

        if (!this.canFlyLongDistances) {
            syscall io_out("...then falls to the ground a few seconds later\n");
        }
    }
}

class Giraffe extends Animal {
    constructor(name) {
        super(name, 4);
    }

    describe() {
        syscall io_out("Has a long neck\n");

        super.describe();
    }
}

class Fish extends Animal, SwimmingAnimalMixin {
    constructor(name) {
        super(name, 0);
    }

    describe() {
        syscall io_out("Has shiny skin\n");

        super.describe();
    }
}

class Seagull extends Animal, SwimmingAnimalMixin, FlyingAnimalMixin {
    constructor(name) {
        super(name, 2);

        this.canBreatheUnderwater = false;
    }

    describe() {
        syscall io_out("Has a long beak\n");

        super.describe();
    }
}

class Chicken extends Animal, FlyingAnimalMixin {
    constructor(name) {
        super(name, 2);

        this.canFlyLongDistances = false;
    }

    describe() {
        syscall io_out("Has brown feathers\n");

        super.describe();
    }
}

var farm = [
    new Giraffe("George the Giraffe"),
    new Fish("Freddie the Fish"),
    new Seagull("Sam the Seagull"),
    new Chicken("Charlie the Chicken")
];

farm.forEach(function(animal) {
    syscall io_out("Animal's name: ");
    syscall io_out(animal.name);
    syscall io_out("\n");

    animal.describe();
    animal.jump();
    animal.swim();
    animal.fly();
});

class SpreadingClass {
    constructor(...args) {
        syscall io_out("Called constructor with args: ");
        syscall io_out(args.join(", "));
        syscall io_out("\n");
    }

    method(...args) {
        syscall io_out("Called method with args: ");
        syscall io_out(args.join(", "));
        syscall io_out("\n");
    }
}

syscall io_out("Simple spreading:\n");

var simpleSpreadingClass = new SpreadingClass(...[1, 2, 3, 4]);

simpleSpreadingClass.method(...[5, 6, 7, 8]);

syscall io_out("Complex spreading:\n");

var complexSpreadingClass = new SpreadingClass(9, ...[10, 11], 12);

complexSpreadingClass.method(13, ...[14, 15], 16);