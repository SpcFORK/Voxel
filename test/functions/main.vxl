var globalValue = "global";

function voidReturn() {
    syscall io_out("Void return called\n");
}

function valueReturn() {
    syscall io_out("Value return called\n");

    return 1 + 1;
}

function localValueReturn() {
    var localValue = "local";

    syscall io_out("Local value return called: ");
    syscall io_out(localValue);
    syscall io_out("\n");

    return localValue;
}

function globalValueReturn() {
    syscall io_out("Global value return called: ");
    syscall io_out(globalValue);
    syscall io_out("\n");

    return globalValue;
}

function globalValueMutate() {
    syscall io_out("Global value before: ");
    syscall io_out(globalValue);
    syscall io_out("\n");

    globalValue = "mutated";

    syscall io_out("Global value after: ");
    syscall io_out(globalValue);
    syscall io_out("\n");
}

function globalValueStoreLocalAndMutate() {
    var localValue = globalValue;

    syscall io_out("Local value before: ");
    syscall io_out(localValue);
    syscall io_out("\n");

    localValue = "mutated";

    syscall io_out("Local value before: ");
    syscall io_out(localValue);
    syscall io_out("\n");
}

function printArguments(a, b) {
    syscall io_out(a);
    syscall io_out("\n");

    syscall io_out(b);
    syscall io_out("\n");
}

function addArguments(a, b) {
    return a + b;
}

function setArgument(arg) {
    syscall io_out("Argument before: ");
    syscall io_out(arg);
    syscall io_out("\n");

    arg = "mutated";

    syscall io_out("Argument after: ");
    syscall io_out(arg);
    syscall io_out("\n");
}

function shadowedGlobalValue(globalValue) {
    syscall io_out("Value of shadowed global value: ");
    syscall io_out(globalValue);
    syscall io_out("\n");
}

function callOtherFunctions() {
    syscall io_out("Calling other functions:\n");

    voidReturn();

    return valueReturn();
}

function fibonacci(n) {
    if (n == 0 || n == 1) {
        return n;
    }

    return fibonacci(n - 1) + fibonacci(n - 2);
}

function reportArgs(a, b, c, d) {
    return "(a = " + a + ", b = " + b + ", c = " + c + ", d = " + d + ")";
}

voidReturn();

var valueReturnResult = valueReturn();

syscall io_out(valueReturnResult);
syscall io_out("\n");

var localValueReturnResult = localValueReturn();

syscall io_out(localValueReturnResult);
syscall io_out("\n");

var globalValueReturnResult = globalValueReturn();

syscall io_out(globalValueReturnResult);
syscall io_out("\n");

globalValueMutate();

syscall io_out("Global value in global scope: ");
syscall io_out(globalValue);
syscall io_out("\n");

globalValueStoreLocalAndMutate();

syscall io_out("Global value in global scope: ");
syscall io_out(globalValue);
syscall io_out("\n");

printArguments("argument 1", "argument 2");

syscall io_out("Add arguments: ");
syscall io_out(addArguments(2, 3));
syscall io_out("\n");

var arg = "original";

setArgument(arg);

syscall io_out("Argument in global scope: ");
syscall io_out(arg);
syscall io_out("\n");

shadowedGlobalValue("shadowed");

var calledValueReturnResult = callOtherFunctions();

syscall io_out(calledValueReturnResult);
syscall io_out("\n");

var fibonacciResult = fibonacci(10);

syscall io_out(fibonacciResult);
syscall io_out("\n");

var namedFunction = function named() {
    syscall io_out("Named function called\n");
}

named();
namedFunction();

var anonymousFunction = function() {
    syscall io_out("Anonymous function called\n");
}

anonymousFunction();

syscall io_out("Spread all args: ");
syscall io_out(reportArgs(...[1, 2, 3, 4]));
syscall io_out("\n");

syscall io_out("Spread some args: ");
syscall io_out(reportArgs(5, ...[6, 7], 8));
syscall io_out("\n");
